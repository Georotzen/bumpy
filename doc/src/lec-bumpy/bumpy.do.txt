!split
===== Contents =====

This worked example

  * fetches a data file from a web site,
  * applies that file as input data for a differential equation modeling a vibrating mechanical system,
  * solves the equation by a finite difference method,
  * visualizes various properties of the solution and the input data.

!split
===== The following programming topics are illustrated =====

  * basic Python constructs: variables, loops, if-tests, arrays, functions
  * flexible storage of objects in lists
  * storage of objects in files (persistence)
  * downloading files from the web
  * user input via the command line
  * signal processing and FFT
  * curve plotting of data
  * unit testing
  * symbolic mathematics
  * modules

All files can be forked at URL: "https://github.com/hplgit/bumpy"

!split
TOC: on


!split
======= Scientific application =======

FIGURE: [fig-bumpy/bumpy_road1, width=400 frac=0.7]

!split
===== Physical problem and mathematical model =====

!bt
\begin{equation}
mu'' + f(u') + s(u) = F(t),\quad u(0)=I,\ u'(0)=V
label{bumpy:eq1}
\end{equation}
!et

 * Input: mass $m$, friction force $f(u')$, spring $s(u)$, external
   forcing $F(t)$, $I$, $V$
 * Output: vertical displacement $u(t)$

FIGURE: [fig-bumpy/vehicle2, width=500 frac=0.8]


!split
===== Relatively stiff spring $k=5$ =====

% if FORMAT == 'html':
MOVIE: [../src/mov-bumpy/m2_k5_b0_2/tmp_frame*]
% else:
# animation in acroread did not work well in latex
# avconv didn't manage to make full movies...
"Go to movie on github.com": "http://hplgit.github.io/bumpy/doc/src/mov-bumpy/m2_k5_b0_2/index.html"
% endif

!split
===== Softer spring $k=1$ =====

% if FORMAT == 'html':
MOVIE: [../src/mov-bumpy/m2_k1_5_b0_2/tmp_frame*]
% else:
"Go to movie on github.com": "http://hplgit.github.io/bumpy/doc/src/mov-bumpy/m2_k1_5_b0_2/index.html"
% endif


!split
===== Numerical model =====

 * Finite difference method
 * Centered differences
 * $u^n$: approximation to exact $u$ at $t=t_n=n\Delta t$
 * First: linear damping $f(u')=bu'$

!bt
\begin{equation*}
u^{n+1} = \left(2mu^n + (\frac{b}{2}\Delta t - m)u^{n-1} +
\Delta t^2(F^n - s(u^n))
\right)(m + \frac{b}{2}\Delta t)^{-1}
\end{equation*}
!et

A special formula must be applied for $n=0$:

!bt
\begin{equation*}
u^1 = u^0 + \Delta t\, V
+ \frac{\Delta t^2}{2m}(-bV - s(u^0) + F^0)
\end{equation*}
!et

!split
===== Extension to quadratic damping: $f(u')=b|u'|u'$ =====

Linearization via geometric mean:

!bt
\[
f(u'(t_n)) = \left. |u'|u'\right\vert^n \approx |u'|^{n-\frac{1}{2}}
(u')^{n+\frac{1}{2}}
\]
!et

!bt
\begin{align*}
u^{n+1} = & \left( m + b|u^n-u^{n-1}|\right)^{-1}\times \\
&\quad \left(2m u^n - mu^{n-1} + bu^n|u^n-u^{n-1}| + \Delta t^2 (F^n - s(u^n))
\right)
\end{align*}
!et

(and again a special formula for $u^1$)


!split
===== Simple implementation =====

@@@CODE src-bumpy/solver.py fromto: from numpy@


!split
===== Using the solver function to solve a problem =====

@@@CODE src-bumpy/session.py fromto: from solver@# End solver_linear

% if FORMAT != 'ipynb':
!split
===== The resulting plot =====

FIGURE: [fig-bumpy/solver_linear_damping, width=700]
% endif

!split
===== More advanced implementation =====

Improvements:

 * Treat linear *and* quadratic damping
 * Allow $F(t)$ to be either a function or an array of measurements
 * Use doc strings for documentation
 * Report errors through raising exceptions
 * Watch out for integer division

!bc pyshell
>>> 2/3
0
>>> 2.0/3
0.6666666666666666
>>> 2/3.0
0.6666666666666666
!ec

At least one of the operands in division must be `float`
to get correct real division!


% if FORMAT == 'ipynb':
!split
===== The code =====

@@@CODE src-bumpy/solver.py fromto: import numpy@# Simplified i
% else:
!split
===== The code (part I) =====

!bc pycod
def solver(I, V, m, b, s, F, t, damping='linear'):
    """
    Solve m*u'' + f(u') + s(u) = F for time points in t.
    u(0)=I and u'(0)=V,
    by a central finite difference method with time step dt.
    If damping is 'linear', f(u')=b*u, while if damping is
    'quadratic', we have f(u')=b*u'*abs(u').
    s(u) is a Python function, while F may be a function
    or an array (then F[i] corresponds to F at t[i]).
    """
    N = t.size - 1              # No of time intervals
    dt = t[1] - t[0]            # Time step
    u = np.zeros(N+1)           # Result array
    b = float(b); m = float(m)  # Avoid integer division

    # Convert F to array
    if callable(F):
        F = F(t)
    elif isinstance(F, (list,tuple,np.ndarray)):
        F = np.asarray(F)
    else:
        raise TypeError(
            'F must be function or array, not %s' % type(F))
!ec

!split
===== The code (part II) =====

!bc pycod
def solver(I, V, m, b, s, F, t, damping='linear'):
    ...
    u[0] = I
    if damping == 'linear':
        u[1] = u[0] + dt*V + dt**2/(2*m)*(-b*V - s(u[0]) + F[0])
    elif damping == 'quadratic':
        u[1] = u[0] + dt*V + \
               dt**2/(2*m)*(-b*V*abs(V) - s(u[0]) + F[0])
    else:
        raise ValueError('Wrong value: damping="%s"' % damping)

    for n in range(1,N):
        if damping == 'linear':
            u[n+1] = (2*m*u[n] + (b*dt/2 - m)*u[n-1] +
                      dt**2*(F[n] - s(u[n])))/(m + b*dt/2)
        elif damping == 'quadratic':
            u[n+1] = (2*m*u[n] - m*u[n-1] + b*u[n]*abs(u[n] - u[n-1])
                      - dt**2*(s(u[n]) - F[n]))/\
                      (m + b*abs(u[n] - u[n-1]))
    return u, t
!ec
% endif

!split
===== Using the solver function to solve a problem =====

!bc pycod
import numpy as np
from numpy import sin, pi  # for nice math
from solver import solver

def F(t):
    # Sinusoidal bumpy road
    return A*sin(pi*t)

def s(u):
    return k*(0.2*u + 1.5*u**3)

A = 0.25
k = 2
t = np.linspace(0, 100, 10001)
u, t = solver(I=0.1, V=0, m=2, b=0.5, s=s, F=F, t=t,
              damping='quadratic')

# Show u(t) as a curve plot
import matplotlib.pyplot as plt
plt.plot(t, u)
plt.show()
!ec

% if FORMAT != 'ipynb':
!split
===== The resulting plot =====

# Produced by session.py

FIGURE: [fig-bumpy/solver_quadratic_damping_forcing, width=700]
% endif

!split
===== Local vs global variables =====

!bc pycod-t
def f(u):
    return k*u
!ec

Here,

  * `u` is a *local variable*,
    which is accessible just inside in the function
  * `k` is a *global variable*, which must be initialized outside
    the function prior to calling `f`

!split
===== Advanced programming of functions with parameters =====

 * $f(u)=ku$ needs parameter $k$
 * Implement $f$ as a class with $k$ as attribute and `__call__`
   for evaluating `f(u)`

!bc pycod-t
class Spring:
    def __init__(self, k):
        self.k = k

    def __call__(self, u):
        return self.k*u

f = Spring(k)

# f looks like a function: can call f(0.2)
!ec

!split
===== The excitation force =====

 * A bumpy road gives an excitation $F(t)$
 * File `bumpy.dat.gz` contains various road profiles $h(x)$
 * "URL":"http://hplbit.bitbucket.org/data/bumpy/bumpy.dat.gz"

Download road profile data $h(x)$ from the Internet:

!bc pycod-t
filename = 'bumpy.dat.gz'
url = 'http://hplbit.bitbucket.org/data/bumpy/bumpy.dat.gz'
import urllib
urllib.urlretrieve(url, filename)
h_data = np.loadtxt(filename)     # read numpy array from file

x = h_data[0,:]                # 1st column: x coordinates
h_data = h_data[1:,:]          # other columns: h shapes
!ec

!split
===== The very basics of two-dimensional arrays =====

!bc dat
0     0.2   0.25  0.15
-0.1  0.15  0.2   0.15
!ec

!bc pyshell
>>> import numpy as np
>>> h_data = np.array([[0, 0.2, 0.25, 0.15],
                       [-0.1, 0.15, 0.2, 0.15]])
>>> h_data.shape  # size of each dimension
(2, 4)
>>> h_data[0,:]
array([ 0.  ,  0.2 ,  0.25,  0.15])
>>> h_data[:,0]
array([ 0. , -0.1])
>>> profile1 = h_data[1,:]
>>> profile1
array([-0.1 ,  0.15,  0.2 ,  0.15])
>>> h_data[1,1:3]                   # elements [1,1] [1,2]
array([ 0.15,  0.2 ])
!ec

!split
===== Computing the force from the road profile =====

!bt
\[ F(t) \sim \frac{d^2}{dt^2}h(x),\ \ v=xt,\quad\Rightarrow\quad
F(t) \sim v^2 h''(x) \]
!et

@@@CODE src-bumpy/bumpy.py fromto: def acceleration\(@def acceleration_vectorized

!split
===== Vectorized version of the previous function =====

@@@CODE src-bumpy/bumpy.py fromto: def acceleration_vectorized@def rms

!split
===== Performing the simulation of vibrations =====

Use a list `data` to hold all input and output data

!bc pycod
data = [x, t]
for i in range(h_data.shape[0]):
    h = h_data[i,:]            # extract a column
    a = acceleration(h, x, v)
    u = solver(t=t, I=0, m=m, b=b, f=f, F=-m*a)
    data.append([h, a, u])
!ec

Parameters for bicycle conditions: $m=60$ kg, $v=5$ m/s, $k=60$ N/m,
$b=80$ Ns/m

!split
===== A high-level solve function (part I) =====

!bc pycod
def solve(url=None, m=60, b=80, k=60, v=5):
    """
    Solve model for verticle vehicle vibrations.

    =========   ==============================================
    variable    description
    =========   ==============================================
    url         either URL of file with excitation force data,
                or name of a local file
    m           mass of system
    b           friction parameter
    k           spring parameter
    v           (constant) velocity of vehicle
    Return      data (list) holding input and output data
                [x, t, [h,a,u], [h,a,u], ...]
    =========   ==============================================
    """
    # Download file (if url is not the name of a local file)
    if url.startswith('http://') or url.startswith('file://'):
        import urllib
        filename = os.path.basename(url)  # strip off path
        urllib.urlretrieve(url, filename)
    else:
        # Check if url is the name of a local file
        if not os.path.isfile(url):
            print url, 'must be a URL or a filename'; sys.exit(1)
!ec

!split
===== A high-level solve function (part II) =====

!bc pycod
def solve(url=None, m=60, b=80, k=60, v=5):
    ...
    h_data = np.loadtxt(filename)  # read numpy array from file

    x = h_data[0,:]                # 1st column: x coordinates
    h_data = h_data[1:,:]          # other columns: h shapes

    t = x/v                        # time corresponding to x
    dt = t[1] - t[0]

    def f(u):
        return k*u

    data = [x, t]      # key input and output data (arrays)
    for i in range(h_data.shape[0]):
        h = h_data[i,:]            # extract a column
        a = acceleration(h, x, v)

        u = solver(t=t, I=0.2, m=m, b=b, f=f, F=-m*a)
        data.append([h, a, u])
    return data
!ec

!split
===== Computing an expression for the noise level of the vibrations =====

!bt
\[ \mbox{RMS} = \sqrt{\int_0^T u^2dt} \approx \sqrt{\frac{1}{N+1}\sum_{i=0}^N (u^n)^2}\]
!et

!bc pycod
def rms(data):
    u_rms = np.zeros(t.size)  # for accumulating the rms value
    for h, a, u in data[2:]:  # loop over results
        u_rms += u**2
    u_rms = np.sqrt(u_rms/u_rms.size)
    data.append(u_rms)
    return data
!ec

!split
===== Pickling: storing Python objects in files =====

After calling

!bc pycod-t
road_url = 'http://hplbit.bitbucket.org/data/bumpy/bumpy.dat.gz'
data = solve(url=road_url,
             m=60, b=200, k=60, v=6)
data = rms(data)
!ec

the `data` array contains single arrays and triplets of arrays,

!bc pycod-t
[x, t, [h,a,u], [h,a,u], ..., [h,a,u], u_rms]
!ec

This list, or any Python object, can be stored on file for later
retrieval of the results, using *pickling*:

!bc pycod-t
import cPickle
outfile = open('bumpy.res', 'w')
cPickle.dump(data, outfile)
outfile.close()
!ec

See "`bumpy.py`": "https://github.com/hplgit/bumpy/blob/master/doc/src/src-bumpy/bumpy.py".


!split
======= User input =======

FIGURE: [fig-bumpy/input2, width=500 frac=0.8]

!split
===== Positional command-line arguments =====

Suppose $b$ is given on the command line:

!bc sys-t
Terminal> python bumpy.py 10
!ec

Code:

!bc pycod
try:
    b = float(sys.argv[1])
except IndexError:
    b = 80  # default
!ec

Note: 1st command-line argument in `sys.argv[1]`, but that is a string

!split
===== Option-value pairs on the command line =====

Now we want to use option-value pairs on the command line:

!bc sys-t
Terminal> python bumpy.py --m 40 --b 280
!ec

Note:

 * All parameters have default values
 * The default value can be overridden on the command line with
   `--option value`
 * We use the `argparse` module for defining, reading, and accessing
   option-value pairs

!split
===== Example on using `argparse` =====

!bc pycod
def command_line_options():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--m', '--mass', type=float,
                        default=60, help='mass of vehicle')
    parser.add_argument('--k', '--spring', type=float,
                        default=60, help='spring parameter')
    parser.add_argument('--b', '--damping', type=float,
                        default=80, help='damping parameter')
    parser.add_argument('--v', '--velocity', type=float,
                        default=5, help='velocity of vehicle')
    url = 'http://hplbit.bitbucket.org/data/bumpy/bumpy.dat.gz'
    parser.add_argument('--roadfile', type=str,
              default=url, help='filename/URL with road data')
    args = parser.parse_args()
    # Extract input parameters
    m = args.m; k = args.k; b = args.b; v = args.v
    url = args.roadfile
    return url, m, b, k, v
!ec

!split
======= Visual exploration =======

Plot

 * the root mean square value of $u(t)$, to see the typical amplitudes
 * the spectrum of $u(t)$, for $t>t_s$ (using FFT) to see which frequencies
   that dominate in the signal
 * for each road shape, a plot of $h(x)$, $a(t)$, and $u(t)$, for
   $t\geq t_s$

!split
===== Code (part I) =====

For convenience:

!bc pycod
from numpy import *
from matplotlib.pyplot import *
!ec

Loading results from file:

!bc pycod
import cPickle
outfile = open('bumpy.res', 'r')
data = cPickle.load(outfile)
outfile.close()

x, t = data[0:2]
u_rms = data[-1]
!ec

Recall list `data`:

!bc pycod-t
[x, t, [h,a,u], [h,a,u], ..., [h,a,u], u_rms]
!ec

!split
===== Code (part II) =====

Display only the last portion of time series:

!bc pycod
indices = t >= t_s   # True/False boolean array
t = t[indices]       # fetch the part of t for which t > t_s
x = x[indices]       # fetch the part of x for which t > t_s
!ec

Plotting the root mean square value array `u_rms` for `t >= t_s` is now done by

!bc pycod
figure()
u_rms = u_rms[indices]
plot(t, u_rms)
legend(['u'])
xlabel('t')
title('Root mean square value of u(t) functions')
show()
!ec
% if FORMAT != 'ipynb':
FIGURE: [fig-bumpy/u_rms, width=300 frac=0.4]
% endif

!split
===== Code (part III) =====

The spectrum of a discrete function $u(t)$:

!bc pycod
def frequency_analysis(u, t):
    A = fft(u)
    A = 2*A
    dt = t[1] - t[0]
    N = t.size
    freq = arange(N/2, dtype=float)/N/dt
    A = abs(A[0:freq.size])/N
    # Remove small high frequency part
    tol = 0.05*A.max()
    for i in xrange(len(A)-1, 0, -1):
        if A[i] > tol:
            break
    return freq[:i+1], A[:i+1]

figure()
u = data[3][2][indices]  # 2nd realization of u
f, A = frequency_analysis(u, t)
plot(f, A)
title('Spectrum of u')
show()
!ec

!split
===== Plot of the spectrum =====

FIGURE: [fig-bumpy/u_spectrum, width=600]

!split
===== Code (part IV) =====

Run through all the 3-lists `[h, a, u]` and plot
these arrays:

!bc pycod
case_counter = 0
for h, a, u in data[2:-1]:
    h = h[indices]
    a = a[indices]
    u = u[indices]

    figure()
    subplot(3, 1, 1)
    plot(x, h, 'g-')
    legend(['h %d' % case_counter])
    hmax = (abs(h.max()) + abs(h.min()))/2
    axis([x[0], x[-1], -hmax*5, hmax*5])
    xlabel('distance'); ylabel('height')

    subplot(3, 1, 2)
    plot(t, a)
    legend(['a %d' % case_counter])
    xlabel('t'); ylabel('acceleration')

    subplot(3, 1, 3)
    plot(t, u, 'r-')
    legend(['u %d' % case_counter])
    xlabel('t'); ylabel('displacement')
    savefig('tmp%d.png' % case_counter)
    case_counter += 1
!ec

!split
===== Plot =====

FIGURE: [fig-bumpy/hau0, width=700]

See "`explore.py`": "https://github.com/hplgit/bumpy/blob/master/doc/src/src-bumpy/explore.py"

!split
======= Advanced topics =======

FIGURE: [fig-bumpy/rocket_science1, width=400 frac=0.6]

!split
===== Symbolic computing via SymPy =====

!bc pyshell
>>> import sympy as sp
>>> x, a = sp.symbols('x a')        # Define mathematical symbols
>>> Q = a*x**2 - 1                  # Quadratic function
>>> dQdx = sp.diff(Q, x)            # Differentiate wrt x
>>> dQdx
2*a*x
>>> Q2 = sp.integrate(dQdx, x)      # Integrate (no constant)
>>> Q2
a*x**2
>>> Q2 = sp.integrate(Q, (x, 0, a)) # Definite integral
>>> Q2
a**4/3 - a
>>> roots = sp.solve(Q, x)          # Solve Q = 0 wrt x
>>> roots
[-sqrt(1/a), sqrt(1/a)]
!ec

!split
===== Go seamlessly from symbolic expression to Python function =====

Convert a SymPy expression `Q` into
a Python function `Q(x, a)`:

!bc pyshell
>>> Q = sp.lambdify([x, a], Q)      # Turn Q into Py func.
>>> Q(x=2, a=3)                     # 3*2**2 - 1 = 11
11
!ec

This `Q(x, a)` function can be used for numerical computing

!split
===== Testing via test functions and test frameworks =====

Modern test frameworks:

 * "nose": "https://nose.readthedocs.org/"
 * "pytest": "http://pytest.org/latest/"

Recommendation: use pytest, stay away from `unittest`


!split
===== Example on a test function =====

!bc pycod
def halve(x):
    """Return half of x."""
    return x/2.0

def test_halve():
    x = 4
    expected = 2
    computed = halve(x)
    # Compare real numbers using tolerance
    tol = 1E-14
    diff = abs(computed - expected)
    assert diff < tol
!ec

Note:

 * Name starts with `test_*`
 * No arguments
 * Must have `assert` on a boolean expression for passed test


% if FORMAT == 'ipynb':
!split
===== Test function for the numerical solver =====

@@@CODE src-bumpy/tests/test_bumpy.py def lhs@def test_all

% else:
!split
===== Test function for the numerical solver (part I) =====

!bc pycod
def lhs_eq(t, m, b, s, u, damping='linear'):
    """Return lhs of differential equation as sympy expression."""
    v = sm.diff(u, t)
    d = b*v if damping == 'linear' else b*v*sm.Abs(v)
    return m*sm.diff(u, t, t) + d + s(u)

def test_solver():
    """Verify linear/quadratic solution."""
    # Set input data for the test
    I = 1.2; V = 3; m = 2; b = 0.9; k = 4
    s = lambda u: k*u
    T = 2
    dt = 0.2
    N = int(round(T/dt))
    time_points = np.linspace(0, T, N+1)

    # Test linear damping
    t = sm.Symbol('t')
    q = 2  # arbitrary constant
    u_exact = I + V*t + q*t**2   # sympy expression
    F_term = lhs_eq(t, m, b, s, u_exact, 'linear')
    print 'Fitted source term, linear case:', F_term
    F = sm.lambdify([t], F_term)
    u, t_ = solver(I, V, m, b, s, F, time_points, 'linear')
    u_e = sm.lambdify([t], u_exact, modules='numpy')
    error = abs(u_e(t_) - u).max()
    tol = 1E-13
    assert error < tol
!ec

!split
===== Test function for the numerical solver (part II) =====

!bc pycod
def test_solver():
    ...
    # Test quadratic damping: u_exact must be linear
    u_exact = I + V*t
    F_term = lhs_eq(t, m, b, s, u_exact, 'quadratic')
    print 'Fitted source term, quadratic case:', F_term
    F = sm.lambdify([t], F_term)
    u, t_ = solver(I, V, m, b, s, F, time_points, 'quadratic')
    u_e = sm.lambdify([t], u_exact, modules='numpy')
    error = abs(u_e(t_) - u).max()
    assert error < tol
!ec
% endif

!split
===== Using a test framework =====

Examine all subdirectories `test*` for `test_*.py` files:

!bc sys-t
Terminal> py.test -s
====================== test session starts =======================
...
collected 3 items

tests/test_bumpy.py .
Fitted source term, linear case: 8*t**2 + 15.6*t + 15.5
Fitted source term, quadratic case: 12*t + 12.9
testing solver
testing solver_linear_damping_wrapper

==================== 3 passed in 0.40 seconds ====================
!ec

Test a single file:

!bc sys-t
Terminal> py.test -s tests/test_bumpy.py
...
!ec

!split
===== Modules =====

 * Put functions in a file - that is a module
 * Move main program to a function
 * Use a test block for executable code (call to main function)

!bc pycod
if __name__ == '__main__':
    <statements in the main program>
!ec

!split
===== Example on a module file =====

!bc pycod
import module1
from module2 import somefunc1, somefunc2

def myfunc1(...):
    ...

def myfunc2(...):
    ...

if __name__ == '__main__':
    <statements in the main program>
!ec

!split
===== What gets imported? =====

Import everything from the previous module:

!bc pycod-t
from mymod import *
!ec

This imports

 * `module1`, `somefunc1`, `somefunc2` (global names in `mymod`)
 * `myfunc1`, `myfunc2` (global functions in `mymod`)
